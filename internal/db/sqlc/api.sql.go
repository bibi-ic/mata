// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: api.sql

package db

import (
	"context"
)

const createAPI = `-- name: CreateAPI :one
INSERT INTO apis (
    key
) VALUES (
    $1
) RETURNING id, key, usage_count, created_at
`

func (q *Queries) CreateAPI(ctx context.Context, key string) (Api, error) {
	row := q.db.QueryRow(ctx, createAPI, key)
	var i Api
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.UsageCount,
		&i.CreatedAt,
	)
	return i, err
}

const getAPI = `-- name: GetAPI :one
SELECT id, key, usage_count, created_at FROM apis
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) GetAPI(ctx context.Context) (Api, error) {
	row := q.db.QueryRow(ctx, getAPI)
	var i Api
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.UsageCount,
		&i.CreatedAt,
	)
	return i, err
}

const updateAPIUsageCount = `-- name: UpdateAPIUsageCount :exec
UPDATE apis
SET usage_count = $2
WHERE id = $1
`

type UpdateAPIUsageCountParams struct {
	ID         int64 `json:"id"`
	UsageCount int64 `json:"usage_count"`
}

func (q *Queries) UpdateAPIUsageCount(ctx context.Context, arg UpdateAPIUsageCountParams) error {
	_, err := q.db.Exec(ctx, updateAPIUsageCount, arg.ID, arg.UsageCount)
	return err
}
